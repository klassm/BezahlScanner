apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.1.2'
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        multiDexEnabled true
        applicationId "li.klass.bezahlscanner"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 6
        versionName "1.0.6"
    }

    signingConfigs {
        release {
            storeFile file("release.jks")
            keyAlias "BezahlScanner"
            storePassword ""
            keyPassword ""
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-production.txt'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'APK LICENSE.txt'
        exclude 'LICENSE.txt'
    }
}

ext {
    supportLibVersion = '26.1.0'
    ankoVersion = '0.10.1'
    playServicesVersion='11.4.2'
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'com.tngtech.java:junit-dataprovider:1.12.0'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.mockito:mockito-core:2.8.9'
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"


    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.google.zxing:android-integration:3.2.1"
    compile ("com.google.android.gms:play-services:$playServicesVersion") {
        exclude group: 'com.android.support'
    }
    compile "com.google.guava:guava:23.3-android"
    compile "org.apache.commons:commons-csv:1.2"
    compile "joda-time:joda-time:2.9.9"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.anko:anko-sdk25:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"
    compile "org.jetbrains.anko:anko-sdk25-coroutines:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7-coroutines:$ankoVersion"
    compile "org.jetbrains.anko:anko-coroutines:$ankoVersion"
    compile 'com.android.support:multidex:1.0.0'
}

kotlin {
    experimental { coroutines "enable" }
}

task readSigningPasswordsFromConsole(
        dependsOn: ['readSigningStorePasswordFromConsole', 'readSigningKeyAliasPasswordFromConsole'])

task readSigningStorePasswordFromConsole << {
    def storePassword = getBuildProperty("storePassword");
    if (!storePassword) {
        storePassword = readFromConsole("Store password")
    }
    android.signingConfigs.release.storePassword = storePassword
}

task readSigningKeyAliasPasswordFromConsole << {
    def aliasPassword = getBuildProperty("aliasPassword");
    if (!aliasPassword) {
        aliasPassword = readFromConsole("Alias / Google Sites password")
    }
    android.signingConfigs.release.keyPassword = aliasPassword
}

tasks.whenTaskAdded { task ->
    if (task.name == 'packageRelease') {
        task.dependsOn readSigningPasswordsFromConsole
    }
}

task release(dependsOn: ['assembleRelease']) << {}

def readFromConsole(String prompt) {
    def console = System.console()
    return new String(console.readPassword('\n\n' + prompt + '\n> '))
}

def getBuildProperty(String key) {
    return getBuildProperties().get(key)
}

def getBuildProperties() {
    def props = new Properties()
    new File(System.getProperty("user.home") + "/BezahlScanner.properties").withInputStream {
        stream -> props.load(stream)
    }
    return props
}


apply plugin: 'com.google.gms.google-services'
